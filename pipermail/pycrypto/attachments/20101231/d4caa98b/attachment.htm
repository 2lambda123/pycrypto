<tt>
&lt;!DOCTYPE&nbsp;HTML&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&gt;<br>
&lt;html&gt;<br>
&nbsp;&nbsp;&lt;head&gt;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=&quot;content-type&quot;&nbsp;content=&quot;text/html;&nbsp;charset=ISO-8859-1&quot;&gt;<br>
&nbsp;&nbsp;&lt;/head&gt;<br>
&nbsp;&nbsp;&lt;body&nbsp;bgcolor=&quot;#ffffff&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;I've&nbsp;been&nbsp;looking&nbsp;into&nbsp;writing&nbsp;a&nbsp;unit&nbsp;test&nbsp;for&nbsp;Elgamal.&nbsp;What&nbsp;I&nbsp;was<br>
&nbsp;&nbsp;&nbsp;&nbsp;looking&nbsp;for&nbsp;were&nbsp;public&nbsp;test&nbsp;vectors.&nbsp;Those&nbsp;don't&nbsp;exist.&nbsp;What&nbsp;I<br>
&nbsp;&nbsp;&nbsp;&nbsp;found&nbsp;instead&nbsp;is&nbsp;that&nbsp;our&nbsp;implementation&nbsp;of&nbsp;Elgamal&nbsp;appears<br>
&nbsp;&nbsp;&nbsp;&nbsp;insecure.&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;References:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Crypto++&nbsp;notes&nbsp;on&nbsp;Elgamal,&nbsp;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;http://weidai.com/scan-mirror/sig.html&quot;&gt;http://weidai.com/scan-mirror/sig.html&lt;/a&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Crypto++&nbsp;FAQ&nbsp;on&nbsp;Elgamal&nbsp;key&nbsp;generation,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;http://www.cryptopp.com/fom-serve/cache/71.html&quot;&gt;http://www.cryptopp.com/fom-serve/cache/71.html&lt;/a&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Bleichenbacher&nbsp;paper&nbsp;on&nbsp;forging&nbsp;Elgamal,&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&gt;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;ftp://ftp.inf.ethz.ch/pub/crypto/publications/Bleich96.ps&quot;&gt;ftp://ftp.inf.ethz.ch/pub/crypto/publications/Bleich96.ps&lt;/a&gt;<br>
IETF&nbsp;paper&nbsp;on&nbsp;DH&nbsp;groups,&nbsp;including&nbsp;pre-computed&nbsp;safe&nbsp;primes,&nbsp;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;http://tools.ietf.org/html/draft-ietf-ipsec-ike-modp-groups-04&quot;&gt;http://tools.ietf.org/html/draft-ietf-ipsec-ike-modp-groups-04&lt;/a&gt;<br>
Wikipedia&nbsp;writeup&nbsp;on&nbsp;Elgamal,&nbsp;&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;http://en.wikipedia.org/wiki/ElGamal_encryption&quot;&gt;http://en.wikipedia.org/wiki/ElGamal_encryption&lt;/a&gt;<br>
<br>
<br>
What&nbsp;I&nbsp;have&nbsp;found&nbsp;is&nbsp;that&nbsp;pycrypto's&nbsp;Elgamal&nbsp;implementation&nbsp;is,&nbsp;shall&nbsp;we&nbsp;say,&nbsp;naive.&nbsp;Specifically&nbsp;in&nbsp;these&nbsp;regards&nbsp;(and&nbsp;I'll&nbsp;quote&nbsp;others&nbsp;here,&nbsp;these&nbsp;assertions&nbsp;as&nbsp;per&nbsp;crypto&nbsp;safety&nbsp;are&nbsp;not<br>
mine.&nbsp;The&nbsp;conclusions&nbsp;about&nbsp;elgamal.py&nbsp;are&nbsp;mine):<br>
<br>
&lt;i&gt;-&nbsp;p&lt;/i&gt;&nbsp;SHOULD&nbsp;be&nbsp;a&nbsp;safe&nbsp;prime,&nbsp;i.e.&nbsp;such&nbsp;that&nbsp;(&lt;i&gt;p&lt;/i&gt;-1)/2&nbsp;is&nbsp;prime<br>
<br>
&nbsp;&nbsp;TB:&nbsp;elgamal.py&nbsp;makes&nbsp;no&nbsp;effort&nbsp;to&nbsp;find&nbsp;a&nbsp;safe&nbsp;prime.&nbsp;elgamal.py&nbsp;does&nbsp;not&nbsp;allow&nbsp;the&nbsp;user&nbsp;to&nbsp;pass&nbsp;her&nbsp;own&nbsp;safe&nbsp;prime&nbsp;to&nbsp;the&nbsp;key&nbsp;generator.<br>
<br>
-&nbsp;The&nbsp;paper&nbsp;by&nbsp;Bleichenbacher&nbsp;referenced&nbsp;above&nbsp;shows&nbsp;that&nbsp;if&nbsp;&lt;i&gt;g&lt;/i&gt;&nbsp;has&nbsp;only&nbsp;small&nbsp;prime&nbsp;factors,&nbsp;and&nbsp;if&nbsp;&lt;i&gt;g&lt;/i&gt;&nbsp;divides&nbsp;the&nbsp;order&nbsp;of&nbsp;the&nbsp;group&nbsp;it&nbsp;generates,&nbsp;then&nbsp;signatures&nbsp;can&nbsp;be&nbsp;forged.<br>
<br>
&nbsp;&nbsp;TB:&nbsp;elgamal.py&nbsp;makes&nbsp;no&nbsp;effort&nbsp;to&nbsp;find&nbsp;a&nbsp;safe&nbsp;&quot;g&quot;<br>
<br>
-&nbsp;Elgamal&nbsp;encryption&nbsp;is&nbsp;not&nbsp;secure&nbsp;under&nbsp;chosen&nbsp;ciphertext&nbsp;attack.&nbsp;To&nbsp;achieve&nbsp;chosen-ciphertext&nbsp;security,&nbsp;the&nbsp;scheme&nbsp;must&nbsp;be&nbsp;further&nbsp;modified,&nbsp;or&nbsp;an&nbsp;appropriate&nbsp;padding&nbsp;scheme&nbsp;must&nbsp;be&nbsp;used.<br>
<br>
&nbsp;&nbsp;TB:&nbsp;elgamal.py&nbsp;does&nbsp;not&nbsp;implement&nbsp;a&nbsp;padding&nbsp;scheme,&nbsp;or&nbsp;modify&nbsp;Elgamal&nbsp;further&nbsp;afaics.<br>
<br>
<br>
So&nbsp;far&nbsp;on&nbsp;Elgamal.&nbsp;It&nbsp;makes&nbsp;me&nbsp;reluctant&nbsp;to&nbsp;go&nbsp;through&nbsp;with&nbsp;a&nbsp;unit&nbsp;test&nbsp;for&nbsp;Elgamal.&nbsp;I&nbsp;don't&nbsp;want&nbsp;to&nbsp;validate&nbsp;an&nbsp;implementation&nbsp;that&nbsp;is&nbsp;inherently&nbsp;insecure.&nbsp;Changing&nbsp;Elgamal&nbsp;to&nbsp;be&nbsp;more&nbsp;secure&nbsp;is&nbsp;out&nbsp;of&nbsp;scope&nbsp;of&nbsp;my&nbsp;current&nbsp;effort&nbsp;on&nbsp;the&nbsp;code&nbsp;base.&nbsp;I'll&nbsp;leave&nbsp;that&nbsp;to&nbsp;others.<br>
<br>
<br>
The&nbsp;broader&nbsp;question&nbsp;that&nbsp;occurs,&nbsp;particularly&nbsp;also&nbsp;in&nbsp;view&nbsp;of&nbsp;the&nbsp;stdlib-crypto&nbsp;discussion&nbsp;(&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;http://bugs.python.org/issue8998&quot;&gt;http://bugs.python.org/issue8998&lt;/a&gt;)&nbsp;is:&nbsp;What&nbsp;is&nbsp;pycrypto's&nbsp;intent?&nbsp;What&nbsp;should&nbsp;it&nbsp;be?<br>
<br>
Should&nbsp;it&nbsp;be&nbsp;a&nbsp;low-level&nbsp;collection&nbsp;of&nbsp;crypto&nbsp;algorithms,&nbsp;suitable&nbsp;for&nbsp;academic&nbsp;and&nbsp;real&nbsp;work,&nbsp;and&nbsp;requiring&nbsp;a&nbsp;strong&nbsp;understanding&nbsp;of&nbsp;crypto&nbsp;and&nbsp;its&nbsp;complexities&nbsp;in&nbsp;either&nbsp;case,&nbsp;with&nbsp;no&nbsp;safeguards&nbsp;should&nbsp;a&nbsp;user&nbsp;choose&nbsp;to&nbsp;shoot&nbsp;himself&nbsp;in&nbsp;the&nbsp;foot?<br>
<br>
Should&nbsp;it&nbsp;be&nbsp;a&nbsp;high-level&nbsp;collection&nbsp;of&nbsp;crypto&nbsp;routines,&nbsp;suitable&nbsp;for&nbsp;the&nbsp;crypto-naive&nbsp;coder,&nbsp;offering&nbsp;safe&nbsp;defaults&nbsp;and&nbsp;a&nbsp;few&nbsp;knobs&nbsp;to&nbsp;influence&nbsp;those&nbsp;parameters&nbsp;that&nbsp;should&nbsp;be&nbsp;able&nbsp;to&nbsp;be&nbsp;chosen&nbsp;by&nbsp;a&nbsp;slightly&nbsp;less&nbsp;crypto-naive&nbsp;coder?&nbsp;Note&nbsp;that&nbsp;this&nbsp;would&nbsp;require&nbsp;vigorous&nbsp;debate&nbsp;about&nbsp;what&nbsp;this&nbsp;second&nbsp;tier&nbsp;should&nbsp;look&nbsp;like,&nbsp;which&nbsp;defaults&nbsp;would&nbsp;be&nbsp;chosen,&nbsp;which&nbsp;knobs&nbsp;would&nbsp;still&nbsp;be&nbsp;exposed,&nbsp;and&nbsp;so&nbsp;on.&nbsp;That&nbsp;debate&nbsp;would&nbsp;have&nbsp;to&nbsp;be&nbsp;carried&nbsp;out&nbsp;in&nbsp;public&nbsp;and&nbsp;would&nbsp;have&nbsp;to&nbsp;include&nbsp;all&nbsp;the&nbsp;other&nbsp;movers-and-shakers&nbsp;in&nbsp;the&nbsp;Python&nbsp;crypto&nbsp;community.<br>
<br>
Should&nbsp;it&nbsp;be&nbsp;both,&nbsp;offering&nbsp;a&nbsp;two-tiered&nbsp;API?<br>
<br>
And&nbsp;further:<br>
<br>
Should&nbsp;pycrypto&nbsp;continue&nbsp;to&nbsp;offer&nbsp;its&nbsp;own&nbsp;implementations&nbsp;of&nbsp;crypto&nbsp;algorithms?&nbsp;Or&nbsp;should&nbsp;it&nbsp;be&nbsp;a&nbsp;Python&nbsp;wrapper&nbsp;for&nbsp;existing&nbsp;implementations&nbsp;such&nbsp;as&nbsp;tomlib,&nbsp;Crypto++&nbsp;or&nbsp;NSS,&nbsp;relying&nbsp;on&nbsp;those&nbsp;implementations&nbsp;to&nbsp;have&nbsp;been&nbsp;coded&nbsp;in&nbsp;a&nbsp;secure&nbsp;manner?<br>
<br>
<br>
Thank&nbsp;you&nbsp;for&nbsp;reading<br>
<br>
Thorsten<br>
<br>
&lt;/pre&gt;<br>
&nbsp;&nbsp;&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>

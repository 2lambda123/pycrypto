<tt>
After&nbsp;reviewing&nbsp;the&nbsp;random&nbsp;number&nbsp;test&nbsp;code&nbsp;I&nbsp;thought&nbsp;some&nbsp;extra&nbsp;functions&nbsp;might&nbsp;be&nbsp;useful,&nbsp;attached&nbsp;is&nbsp;said&nbsp;code&lt;br&gt;&lt;br&gt;&lt;br&nbsp;clear=&quot;all&quot;&gt;#&nbsp;-*-&nbsp;coding:&nbsp;utf-8&nbsp;-*-&lt;br&gt;#&lt;br&gt;#&amp;nbsp;&nbsp;SelfTest/Util/test_generic.py:&nbsp;Self-test&nbsp;for&nbsp;the&nbsp;Crypto.Random.new()&nbsp;function&lt;br&gt;<br>
#&lt;br&gt;#&nbsp;=======================================================================&lt;br&gt;#&nbsp;Copyright&nbsp;(C)&nbsp;2008&amp;nbsp;&nbsp;Dwayne&nbsp;C.&nbsp;Litzenberger&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:dlitz@dlitz.net&quot;&gt;dlitz@dlitz.net&lt;/a&gt;&amp;gt;&lt;br&gt;#&lt;br&gt;#&nbsp;Permission&nbsp;is&nbsp;hereby&nbsp;granted,&nbsp;free&nbsp;of&nbsp;charge,&nbsp;to&nbsp;any&nbsp;person&nbsp;obtaining&lt;br&gt;<br>
#&nbsp;a&nbsp;copy&nbsp;of&nbsp;this&nbsp;software&nbsp;and&nbsp;associated&nbsp;documentation&nbsp;files&nbsp;(the&lt;br&gt;#&nbsp;&amp;quot;Software&amp;quot;),&nbsp;to&nbsp;deal&nbsp;in&nbsp;the&nbsp;Software&nbsp;without&nbsp;restriction,&nbsp;including&lt;br&gt;#&nbsp;without&nbsp;limitation&nbsp;the&nbsp;rights&nbsp;to&nbsp;use,&nbsp;copy,&nbsp;modify,&nbsp;merge,&nbsp;publish,&lt;br&gt;<br>
#&nbsp;distribute,&nbsp;sublicense,&nbsp;and/or&nbsp;sell&nbsp;copies&nbsp;of&nbsp;the&nbsp;Software,&nbsp;and&nbsp;to&lt;br&gt;#&nbsp;permit&nbsp;persons&nbsp;to&nbsp;whom&nbsp;the&nbsp;Software&nbsp;is&nbsp;furnished&nbsp;to&nbsp;do&nbsp;so.&lt;br&gt;#&lt;br&gt;#&nbsp;THIS&nbsp;SOFTWARE&nbsp;IS&nbsp;PROVIDED&nbsp;BY&nbsp;THE&nbsp;COPYRIGHT&nbsp;HOLDERS&nbsp;AND&nbsp;CONTRIBUTORS&lt;br&gt;#&nbsp;&amp;quot;AS&nbsp;IS&amp;quot;&nbsp;AND&nbsp;ANY&nbsp;EXPRESS&nbsp;OR&nbsp;IMPLIED&nbsp;WARRANTIES,&nbsp;INCLUDING,&nbsp;BUT&nbsp;NOT&lt;br&gt;<br>
#&nbsp;LIMITED&nbsp;TO,&nbsp;THE&nbsp;IMPLIED&nbsp;WARRANTIES&nbsp;OF&nbsp;MERCHANTABILITY&nbsp;AND&nbsp;FITNESS&nbsp;FOR&lt;br&gt;#&nbsp;A&nbsp;PARTICULAR&nbsp;PURPOSE&nbsp;ARE&nbsp;DISCLAIMED.&nbsp;IN&nbsp;NO&nbsp;EVENT&nbsp;SHALL&nbsp;THE&nbsp;COPYRIGHT&lt;br&gt;#&nbsp;OWNER&nbsp;OR&nbsp;CONTRIBUTORS&nbsp;BE&nbsp;LIABLE&nbsp;FOR&nbsp;ANY&nbsp;DIRECT,&nbsp;INDIRECT,&nbsp;INCIDENTAL,&lt;br&gt;<br>
#&nbsp;SPECIAL,&nbsp;EXEMPLARY,&nbsp;OR&nbsp;CONSEQUENTIAL&nbsp;DAMAGES&nbsp;(INCLUDING,&nbsp;BUT&nbsp;NOT&lt;br&gt;#&nbsp;LIMITED&nbsp;TO,&nbsp;PROCUREMENT&nbsp;OF&nbsp;SUBSTITUTE&nbsp;GOODS&nbsp;OR&nbsp;SERVICES;&nbsp;LOSS&nbsp;OF&nbsp;USE,&lt;br&gt;#&nbsp;DATA,&nbsp;OR&nbsp;PROFITS;&nbsp;OR&nbsp;BUSINESS&nbsp;INTERRUPTION)&nbsp;HOWEVER&nbsp;CAUSED&nbsp;AND&nbsp;ON&nbsp;ANY&lt;br&gt;#&nbsp;THEORY&nbsp;OF&nbsp;LIABILITY,&nbsp;WHETHER&nbsp;IN&nbsp;CONTRACT,&nbsp;STRICT&nbsp;LIABILITY,&nbsp;OR&nbsp;TORT&lt;br&gt;<br>
#&nbsp;(INCLUDING&nbsp;NEGLIGENCE&nbsp;OR&nbsp;OTHERWISE)&nbsp;ARISING&nbsp;IN&nbsp;ANY&nbsp;WAY&nbsp;OUT&nbsp;OF&nbsp;THE&nbsp;USE&lt;br&gt;#&nbsp;OF&nbsp;THIS&nbsp;SOFTWARE,&nbsp;EVEN&nbsp;IF&nbsp;ADVISED&nbsp;OF&nbsp;THE&nbsp;POSSIBILITY&nbsp;OF&nbsp;SUCH&nbsp;DAMAGE.&lt;br&gt;#&nbsp;=======================================================================&lt;br&gt;<br>
#&lt;br&gt;&lt;br&gt;&amp;quot;&amp;quot;&amp;quot;Self-test&nbsp;suite&nbsp;for&nbsp;Crypto.Random.new()&amp;quot;&amp;quot;&amp;quot;&lt;br&gt;&lt;br&gt;__revision__&nbsp;=&nbsp;&amp;quot;$Id$&amp;quot;&lt;br&gt;&lt;br&gt;import&nbsp;unittest&lt;br&gt;&lt;br&gt;class&nbsp;SimpleTest(unittest.TestCase):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;runTest(self):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;quot;&amp;quot;&amp;quot;Crypto.Random.new()&amp;quot;&amp;quot;&amp;quot;&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&nbsp;Import&nbsp;the&nbsp;OSRNG&nbsp;module&nbsp;and&nbsp;try&nbsp;to&nbsp;use&nbsp;it&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;from&nbsp;Crypto&nbsp;import&nbsp;Random&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;randobj&nbsp;=&nbsp;Random.new()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;x&nbsp;=&nbsp;randobj.read(16)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;y&nbsp;=&nbsp;randobj.read(16)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.assertNotEqual(x,&nbsp;y)&lt;br&gt;<br>
class&nbsp;TestNotAlwaysEqual(unittest.TestCase):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;runTest(self):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;from&nbsp;Crypto&nbsp;import&nbsp;Random&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;randobj&nbsp;=&nbsp;Random.new()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;k&nbsp;=&nbsp;10&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;DataArray&nbsp;=&nbsp;[]&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;x&nbsp;=&nbsp;randobj.read(16)&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;count&nbsp;=&nbsp;0&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(0,k):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;y&nbsp;=&nbsp;randobj.read(16)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;if&nbsp;x&nbsp;==&nbsp;y:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;count&nbsp;+=&nbsp;1&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.assertNotEqual(count,k)&lt;br&gt;class&nbsp;TestAverage(unittest.TestCase):&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;def&nbsp;runTest(self):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;from&nbsp;Crypto&nbsp;import&nbsp;Random&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;randobj&nbsp;=&nbsp;Random.new()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;x&nbsp;=&nbsp;randobj.read(2**15)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;values&nbsp;=&nbsp;[]&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;x:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;values.append(ord(i))&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;total&nbsp;=&nbsp;0&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;values:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;total&nbsp;+=&nbsp;i&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;average&nbsp;=&nbsp;total/len(values)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;print&nbsp;average&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;self.assertEqual(average&nbsp;in&nbsp;range((256/2)-28,(256/2)+28),True)&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;<br>
&lt;br&gt;def&nbsp;get_tests():&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;return&nbsp;[SimpleTest(),TestNotAlwaysEqual(),TestAverage()]&lt;br&gt;&lt;br&gt;if&nbsp;__name__&nbsp;==&nbsp;&amp;#39;__main__&amp;#39;:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;suite&nbsp;=&nbsp;lambda:&nbsp;unittest.TestSuite(get_tests())&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;unittest.main(defaultTest=&amp;#39;suite&amp;#39;)&lt;br&gt;<br>
&lt;br&gt;#&nbsp;vim:set&nbsp;ts=4&nbsp;sw=4&nbsp;sts=4&nbsp;expandtab:&lt;br&gt;&lt;br&gt;--&nbsp;&lt;br&gt;Sam&nbsp;Phippen&lt;br&gt;&lt;br&gt;Please&nbsp;avoid&nbsp;sending&nbsp;me&nbsp;Word&nbsp;or&nbsp;PowerPoint&nbsp;attachments.&lt;br&gt;See&nbsp;&lt;a&nbsp;href=&quot;http://www.gnu.org/philosophy/no-word-attachments.html&quot;&gt;http://www.gnu.org/philosophy/no-word-attachments.html&lt;/a&gt;&lt;br&gt;<br>
<br>

</tt>
